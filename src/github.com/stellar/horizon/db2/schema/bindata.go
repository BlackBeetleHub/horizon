// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_use_sequence_in_history_accounts.sql
// migrations/4_add_protocol_version.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x6d\x6f\xdb\x38\x12\xfe\x5e\xa0\xff\x81\xd8\x2f\x4e\x00\x3b\xc8\x4b\x37\x4d\x1c\x64\x01\x37\xd1\x5e\x8d\x73\xe5\xad\x2d\x5f\xb7\x58\x2c\x08\x5a\x1a\xcb\xbc\x4a\xa4\x4a\x52\xa9\xbd\x87\xfb\xef\x07\x59\x96\x2d\x4b\xa2\x5e\x6c\x65\xef\x63\xa4\xd1\x33\xcf\xc3\x19\x0d\x67\x68\xa5\xd7\x7b\xfb\xa6\xd7\x43\xbf\x71\xa9\x5c\x01\xd3\xcf\x23\xe4\x10\x45\xe6\x44\x02\x72\x42\x3f\x88\x6e\xbe\x7d\xb3\x31\x79\x0e\xfd\x00\x1c\xb4\x10\xdc\xdf\xdb\xbc\x80\x90\x94\x33\x74\x7f\x71\x7b\x71\x95\x36\x9b\xaf\x51\xe0\xe2\x08\xe2\xc0\xe6\x3a\x02\x9b\x1a\x16\x92\x8a\x28\xf0\x81\x29\xac\xa8\x0f\x3c\x54\xe8\x11\x5d\x3e\xc4\xf7\x3c\x6e\x7f\x2b\xb8\x6c\x7b\x34\xb2\x07\x66\x73\x87\x32\x17\x3d\xa2\xce\xcc\xfa\xf5\xae\xf3\xb0\x43\x64\x0e\x11\x0e\xb6\x39\x5b\x70\xe1\x53\xe6\x62\xa9\x04\x65\xae\x44\x8f\x88\xb3\x04\x65\x09\xf6\x37\xbc\x08\x99\xad\x28\x67\x78\xce\x1d\x0a\x91\xc1\x82\x78\x12\x0e\x3d\xf9\x94\x61\x1f\xa4\x24\xee\xc6\xe2\x07\x11\x8c\x32\xf7\x61\x27\x01\x88\xb0\x97\x38\x20\x6a\x89\x1e\x51\x10\xce\x3d\x6a\x77\x23\xd5\x36\x51\xc4\xe3\x7b\x43\x07\x16\x24\xf4\x14\x56\x64\xee\x81\x0c\x88\x0d\x11\xf7\x4e\xee\xfe\x0f\xaa\x96\x98\x53\x27\x4d\x27\x0e\x40\xaf\x87\x4c\xe2\x43\x1f\xb9\x5c\x04\xd8\xa7\xae\x20\x11\x7b\xf9\x80\xac\x75\x00\x7d\x64\x0d\x3e\x8c\x8c\x07\x34\xb5\x97\xe0\x93\xfe\x96\xcb\x03\x1a\xff\x60\x20\xfa\xa8\x97\x44\xf1\x69\x62\x0c\x2c\x23\xb6\xce\x42\xa1\xb3\xb7\x6f\x10\x42\x88\x3a\x48\xc1\x4a\x21\x73\x6c\x21\x73\x36\x1a\x75\xe3\xcb\x24\x08\x3c\x0a\x0e\x26\x0a\x45\x91\x91\x8a\xf8\x01\x8a\x08\x6f\xfe\x44\x7f\x71\x06\x6f\xdf\x9c\x6f\x08\x67\x28\x2f\xa9\x54\x5c\xac\x31\xb1\x6d\x1e\x32\x25\x31\x75\xb0\x84\xef\x09\xf5\xa9\xf1\x79\x66\x98\x4f\xf5\xd9\x27\x0f\xe8\x80\x63\xbe\x53\x6b\x30\xb1\xd0\x97\xa1\xf5\x11\x5d\xc5\x57\x86\xe6\xd3\xc4\xf8\x64\x98\x16\xfa\xf0\x35\xb9\x66\x8e\xd1\xa7\xa1\xf9\xaf\xc1\x68\x66\xec\x2f\x0c\x7e\x4f\x5d\x78\x1a\x3c\x7d\x34\xd0\x55\x1d\x61\xa7\x04\x23\x8b\x95\x8a\xc6\x9c\xba\x94\x29\xf4\x6c\xfc\x3a\x98\x8d\x2c\xc4\x60\xa5\x5e\x88\x77\xd6\xd1\xc8\xef\xf4\xfb\x02\x5c\xdb\x23\x52\x9e\xe7\x82\xe8\x38\x02\xa4\x44\xf6\x92\x08\x62\x2b\x10\xe8\x85\x88\x35\x65\xee\xd9\xed\xbb\xf3\x8a\xf0\xc1\x62\x01\x76\x3b\x22\xb7\x50\x89\xc6\x8c\x10\xbc\xd7\x9c\xa1\x9f\x18\xf2\x00\xe2\xa4\xd5\x9b\xfe\xc4\x85\x03\xe2\x27\x44\x99\x02\x17\x44\xf6\xb6\x5a\x07\xa0\xbb\xe7\x80\x22\xd4\x93\xe8\xdf\x92\xb3\x79\xc5\xa2\x78\xe0\xb8\x20\x5a\x59\x94\x2d\x54\xb2\x28\x12\xbe\x87\xc0\x6c\x2d\xcb\xd8\x1c\x2f\x89\x5c\x16\x87\x33\xfb\x40\x20\xe0\x85\xf2\x50\xe2\xca\x27\x93\x35\x12\x84\x49\x12\x57\xc9\x4d\x60\x76\x54\x92\x54\xbc\xcc\xfa\xd8\x07\xa6\xe6\x03\xb6\xc7\x65\x51\x51\x89\x0a\xff\xae\xae\xe4\x1e\x12\x40\x54\xe5\x53\x5b\xe3\x30\x70\xea\x1b\xef\xd2\x29\xf9\xdb\x0f\xb8\x50\x20\x70\xb2\x85\x65\x05\x5d\xe5\x12\x8b\x2b\xe2\x61\x9b\x53\x26\x35\x99\xb9\x00\xc0\x01\xe7\x9e\xe6\x76\xb4\xab\xe2\x05\x68\xe3\xbe\xb9\x2f\x40\x82\x78\xd1\xda\xf8\x64\x85\xd5\x0a\x4b\x50\x58\xd2\xbf\xb4\x66\x81\xe0\x8a\xdb\xdc\xd3\xaa\xdb\x87\xab\xe2\x35\xd8\xc7\x3d\x20\x42\x51\x9b\x06\xa4\xa5\x7a\x58\x8c\x9c\xaa\x8e\x1a\x6d\x0d\x4a\x45\x75\xf9\x39\x4a\x7d\xeb\xdb\x5c\xa9\x9b\xbf\x7d\xd3\x6b\x24\x1a\x8d\xbf\x98\xc6\x33\xfa\xf0\xb5\x5a\xfd\x60\x64\x19\x93\x86\xe2\x77\xf0\x15\xe6\x17\xd4\xa9\x25\xa9\xdd\xcc\x2d\xd8\xcb\xb3\x45\x23\x55\x69\xb5\x46\x9b\x06\xcc\x8e\x45\x6d\x36\xb7\x93\xf7\xb6\xed\x35\xc9\x43\x61\x43\x92\xfe\x9a\xcd\x24\x29\x09\x9d\x4e\xbf\x9f\xb3\xa8\xfb\xa2\xa4\x75\xb6\x5d\x28\x74\xd8\xf5\x4b\x45\xad\x28\x9c\x5c\x2c\x74\x3c\x5b\x2f\x17\x15\x8e\xfe\xf6\x82\xd1\x50\xf8\xe9\x25\xa3\xc2\x61\xbe\x68\xe8\x1e\xa8\x28\x1b\xa9\xc7\xda\xce\xe4\x5d\xf6\xa6\xa9\xd5\x6f\xf9\xb6\x9d\x5e\x55\x2b\x59\xbb\xb2\x94\x97\x88\x62\xe3\xbd\xf7\x92\x76\x88\xe8\xdf\x4e\x5d\x4b\xf9\x7f\xeb\x09\xd5\x0a\x03\x7b\x01\x8f\x07\x50\x38\x28\xab\x55\xd4\x9e\x85\x9e\xd2\xdd\xf5\x41\x11\xdd\xbd\x68\x35\xb4\xf7\x25\x75\x19\x51\xa1\x80\xa2\x01\xee\xfe\xf6\xfc\x8f\x3f\xf7\x65\xfa\x3f\xff\x2d\x2a\xd4\x7f\xfc\x99\x6b\x15\xc1\xe7\x78\xb3\x63\xe4\xab\xfa\x0e\x8c\x71\x06\xa5\x75\x3f\x05\x96\xc7\x49\xd4\x51\x1f\xf0\x9c\x87\xcc\x91\x51\x10\xef\x04\x61\x6e\xd5\x91\x81\xa6\xfb\xa3\x4e\xf2\x9e\x6d\x29\xd6\xad\x11\xf1\x8b\x36\x36\x47\x55\x9d\x02\x8a\xed\x9f\xc6\xa3\xd9\x27\x33\x4a\x81\xa9\x61\xe9\x27\xf0\xd2\xe6\x24\x3d\x8f\x1f\x53\x1f\x5b\x55\xab\x75\xd2\x48\x6f\x45\x65\xd5\x2b\x7e\x26\x8a\xa0\x05\x17\x35\x0e\xb3\xd0\xf3\xc0\x1a\x54\x2b\x1d\x9a\x53\x63\x62\xa1\xa1\x69\x8d\x73\x07\x5a\x9b\xfd\x69\x8a\xce\x3a\x57\x98\x32\xaa\x28\xf1\xb0\xdc\xc0\x5d\xc8\xef\x5e\xa7\x8b\x3a\xd7\x97\x57\xef\x7b\x97\x37\xbd\xeb\x4b\x74\x75\xd3\x7f\xf7\xbe\xff\xee\xee\xe2\xfe\xf6\xf6\xe6\xfe\xe7\xde\xe5\xcf\x9d\x88\x7b\x2d\xf8\x6b\x4c\x99\x03\xab\xc3\xa5\x98\xaf\xb1\xe2\xd4\x29\x77\x75\x7f\x77\xff\xbe\x91\xab\x1b\x1c\x4a\xd8\x95\x54\x4c\x19\xce\x9e\x02\x95\x3a\x7c\x7f\x7d\x7d\x7b\xdd\xc8\xe1\x3b\x4c\x1c\x07\x67\x27\xc5\x72\x27\x77\x77\x77\x37\x89\x13\x7d\xf0\x4b\x4f\xcf\x6a\x46\xff\xd8\xb3\xc6\x28\xbd\xab\xd1\xa7\xc6\xc8\x78\xb2\x52\x07\xba\x17\x12\xca\x8f\xde\xba\xe8\xaa\x1b\x9f\xdc\xd6\xd3\x5e\x74\xa6\xd6\x5c\xba\x06\xbc\xe8\x6c\xaa\x35\xf0\x1a\x13\xff\xa9\x31\x6c\x36\x61\xb6\x14\xd1\xf2\x52\xde\x34\xbe\x9a\x89\xb2\xb5\x28\xd4\x1a\xa8\x4e\x8d\x43\xd3\xc6\xbd\xa5\x48\x54\x6d\x32\x4d\x63\xa1\x6d\xd3\x8f\x5d\x9f\x6c\xcd\xcc\xfc\x8d\x83\x6f\xb0\x4e\x1c\x3d\x8d\xcd\xa9\x35\x19\x0c\xcd\x63\x36\xef\x0c\x70\xdc\x4e\x0d\x9e\x9f\x53\xa8\x85\xce\xd1\x6f\x93\xe1\xa7\xc1\xe4\x2b\xfa\xa7\xf1\x15\x9d\x51\xe7\x98\x56\xab\xe2\xbd\x68\x4d\x63\xb9\x9f\x42\xc9\x35\xa8\x35\x5a\x01\x6d\x6f\x54\x99\x91\xad\xaf\x82\xce\x53\xe9\x3a\x94\xd2\xab\xb5\x12\xf3\xdd\x8e\x96\xa8\x19\x9a\xcf\xc6\xef\xb5\xe7\xd8\x8d\x75\x0a\x05\x8d\xcd\xe2\xa9\x76\x36\x1d\x9a\xff\x40\x73\x25\x00\xd0\xd9\xd6\xb8\x9b\x9b\x18\x75\x1c\xa3\x01\xf8\x44\x82\x9b\x19\xba\x16\xbb\xec\xe4\xad\x23\x15\xef\xb6\x27\xd2\x8a\x41\xea\x11\xcb\x0c\xf7\xdd\xfc\x18\xaf\xcd\x76\x0c\x51\x7b\xba\xb1\x39\x8e\xf0\xcc\x1c\x7e\x9e\x25\xbc\x33\x88\x69\xf6\xc9\x0f\x7d\x07\xc4\x8b\x8e\xe6\xbb\xc9\x0f\x76\x65\x9c\xf7\x83\xd0\xe9\x6c\xa9\x53\x9b\xe7\xfe\xa8\xaf\x5b\xf8\xb3\x42\x0d\xee\x3c\xc0\x41\x8b\xf4\xb7\x70\x69\x05\x9a\xf2\x7d\x94\x20\xbd\x0e\xb5\x6a\x55\xc7\x16\x4e\x93\xef\x47\x2a\x39\x3c\xc6\x2d\xd6\xc2\x83\x28\x5d\x97\xfc\x58\x29\x5b\x0d\x7b\x98\x63\x43\x51\xbd\xec\xbb\xdf\x6b\xe7\xeb\x96\x56\xfe\x10\x31\xcd\x3c\xf9\x09\xfa\x80\xaa\x9e\x58\x7a\xa5\x5b\x64\x97\x83\xad\x57\x0f\x75\x3c\x55\x1c\x24\x75\x62\xac\xf7\x30\xc7\xa7\x6b\x8d\xd4\x8c\x4f\x12\x72\xf3\x25\x67\x78\xfb\xed\x46\x0b\x6b\x5c\xe9\x23\xad\x70\xf7\x41\xca\xe1\x9e\x1d\x1b\x36\x94\xd0\x4a\x86\x94\xc1\x57\x13\xaf\xb5\xec\xdb\xed\x20\xc2\x54\xeb\x00\x4e\xc9\x9b\x52\xe0\xca\x2d\x28\x32\xaa\xc1\x77\xfb\xde\x46\xb0\xbb\x0f\x2a\xda\x23\x5d\x84\x5e\x59\x35\x76\x96\xcd\xe8\xbf\x42\x86\x1c\xa0\x1f\x5b\xed\xf4\x90\x99\x2f\x44\x5e\x65\xd9\x73\x9f\xa1\x54\xaa\xc8\x3c\xd0\x4c\x53\xea\x03\xa1\xd7\x8c\x46\xfa\x3b\xa4\x2a\x41\x29\xdb\x66\x5a\x8a\xbe\x7a\x7a\x4d\x51\x85\x5f\x59\x55\xa9\x2b\x7a\xa8\x99\xcc\x64\x0a\x78\x4d\x69\xbb\x1f\xf2\xaa\xe4\x94\xce\x6f\x87\xf0\xfb\x03\xb2\x57\x7a\xfb\xb3\x0e\x0a\x1b\xb5\x63\x6a\xc0\x21\xf0\xe1\xce\xde\x5e\x11\x28\xf3\x52\x47\x4a\xe3\x8e\x23\xe3\xb0\xd5\xdd\x2f\x8f\x5d\x4b\x42\xbd\x3d\x30\xdd\x18\xbe\x52\x2e\xe5\x5d\x9c\xd4\x99\x2a\x41\x1c\xd8\xb5\x04\xc9\xf8\x8c\xe7\x9c\x7f\x3b\x65\xcd\x4b\x60\x2b\xfb\x8d\xb3\xb3\xe4\x03\xa1\xde\x2f\xbf\xa0\x8e\xe4\x9e\x83\x89\x94\xa0\x36\xd1\xea\xf4\xfb\x0a\x56\xea\xfc\xbc\x8b\xf4\x86\x36\x77\xea\x19\x52\x29\x43\x10\x7a\xd3\x39\x0f\xdd\xa5\xaa\xe5\xfe\xc0\xb4\x9c\xc0\x81\x69\x86\xc2\x39\xfa\xf2\xd1\x98\x18\x71\xca\xa1\x47\x74\x73\x93\x89\x9b\xee\x9f\x24\x90\xcd\xfd\xc0\x03\x05\x49\x40\xfe\x17\x00\x00\xff\xff\xb0\x5b\x87\x71\x55\x31\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 12629, mode: os.FileMode(438), modTime: time.Unix(1499953054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x5f\x6f\xe3\xb8\x11\x7f\x0f\x90\xef\x30\xb8\x17\x27\x68\xd2\xde\xe2\x8a\xc3\xd5\x41\x0e\xf0\x26\xda\xae\x51\x47\xde\x8d\xed\xee\x2e\x0e\x07\x82\x96\xc6\x32\x1b\x99\xd4\x92\x54\xd6\xb9\xa2\xdf\xbd\xd0\x5f\xeb\x1f\x25\xd9\x6b\xe7\x1e\xf2\x10\x69\x38\x33\xbf\x99\xe1\x6f\x46\xa4\xaf\xaf\xe1\x2f\x1b\xe6\x49\xaa\x11\x16\xc1\xf9\xd9\xf5\x75\xf4\x07\x1f\x84\xd2\x9e\xc4\xd9\xc7\x09\xb8\x54\xd3\x25\x55\x08\x6e\xb8\x49\x05\xce\xcf\x66\xd6\x1c\x94\xa6\x1a\x37\xc8\x35\xd1\x6c\x83\x22\xd4\x70\x0b\x3f\xde\x24\xef\x7c\xe1\x3c\x35\x3c\x76\x7c\x16\xc9\x23\x77\x84\xcb\xb8\x07\xb7\x30\x58\xcc\xdf\xfd\x32\xb8\xc9\x35\x72\x97\x4a\x97\x38\x82\xaf\x84\xdc\x30\xee\x11\xa5\x25\xe3\x9e\x82\x5b\x10\x3c\xd3\xb2\x46\xe7\x89\xac\x42\xee\x68\x26\x38\x59\x0a\x97\x61\x24\xb0\xa2\xbe\xc2\xb2\xa5\x0d\xe3\x64\x83\x4a\x51\x2f\x96\xf8\x46\x25\x67\xdc\xbb\x89\x20\xa4\x48\x6d\xba\xc1\x21\x04\x7e\xe0\xa9\xaf\xfe\x0d\xcc\x5f\x02\x1c\x82\xf5\x79\x6e\xd9\xb3\xf1\xd4\xbe\x81\x99\xb3\xc6\x0d\x1d\xc2\xf5\x0d\x4c\xbf\x71\x94\x43\xb8\xce\x82\x70\xf7\x68\x8d\xe6\xd6\x4e\x18\xc6\xef\xc0\x9e\xce\xc1\xfa\x3c\x9e\xcd\x67\x99\x4e\xf8\x34\x9e\xbf\x87\xd9\xdd\x7b\xeb\x61\x04\x81\x47\x1c\xaa\xa9\x2f\x12\x1f\x2a\x5e\xec\x34\x55\xfc\xb9\x9b\x3e\x3c\x58\xf6\xbc\xdd\x9b\x44\x06\xa6\x76\x5d\x0f\x8c\x67\x30\xf8\x30\xf9\x5b\xe0\x45\x19\x0d\xa4\x70\xd0\x0d\x25\xf5\xc1\xa7\xdc\x0b\xa9\x87\x83\x26\x77\xd6\x4a\x0b\x89\x47\x8d\x49\xa2\xb2\x1c\x92\x70\xe9\x33\xa7\x3d\x1c\x65\x4f\x0e\x8e\x46\x6a\x3d\x0a\x46\x54\xd5\xa0\x5f\x02\x84\x95\x90\x10\x3d\x8f\xea\x51\xa1\x56\x20\x56\x70\xf1\x84\x2f\x57\xf0\x4c\xfd\x10\x2f\x21\xa0\x4c\xaa\x2c\x40\x71\x99\x22\x95\xce\x9a\x04\x54\xaf\xe1\x36\xf5\xff\xaa\x9a\xda\x48\xd0\xc5\x15\x0d\x7d\x4d\x34\x5d\xfa\xa8\x02\xea\x60\x54\xf1\x83\xda\xfb\x6f\x4c\xaf\x89\x60\x6e\xb1\x88\xab\xb9\x60\x91\x8f\x2f\x84\x3a\x8e\x08\xb9\x56\x59\x2c\xe6\xa3\xb7\x13\x6b\x17\x89\x34\x98\x79\x38\x6e\x60\x9e\xdb\x1e\x56\x72\x14\x2f\xad\x29\x86\x8b\xf3\x33\x00\x00\xe6\xc2\x92\x79\x8c\xeb\x38\x7d\xf6\x62\x32\xb9\x4a\x5e\x50\xd7\x95\xa8\x14\x38\x6b\x2a\xa9\xa3\x51\xc2\x33\x95\x2f\x8c\x7b\x17\x3f\xff\xfd\xf2\xfc\xec\xb2\xb1\x92\x52\x23\xb8\x5a\xa1\x73\x02\xe7\x53\xbd\x99\xef\x15\x4c\xc4\x88\x25\x13\x14\x01\x4a\x1a\x93\x89\x51\xf4\x07\x21\x5d\x94\x3f\x00\xe3\x1a\x3d\x94\xd5\xd7\x71\x29\x19\xde\xb9\xa8\x29\xf3\x15\xfc\x47\x09\xbe\xec\x88\x90\x8f\xae\x87\xf2\xf8\x11\x4a\xf5\x66\x11\x52\xf8\x35\x44\xee\x18\x5d\x4e\xc4\xc9\x9a\xaa\x75\x73\xa2\xab\x0b\x02\x89\xcf\x4c\x84\x8a\x74\xae\xcc\x02\x26\x29\x57\x34\x61\xf0\x38\x4b\xb9\x2b\xf7\xd6\xbb\xd1\x62\x32\x87\x1f\xab\x36\x76\x59\xea\xb9\xc0\xf1\x85\x42\x97\x50\x0d\x51\x2b\x52\x9a\x6e\x02\x88\xf6\x5a\xd4\x94\xa2\x27\xf0\x87\xe0\x58\x5b\x24\x91\xea\xce\x55\xa9\x70\x18\xb8\xfd\x85\xf3\xda\xca\xfe\xdf\x04\x42\x6a\x94\xe4\x19\xa5\x62\x82\xd7\x00\xbd\xa9\x55\x99\xd0\xd4\x27\x8e\x60\x5c\x19\xca\x74\x85\x48\x02\x21\x7c\xc3\xeb\xa8\x91\x93\x15\x1a\xf3\x1e\xbf\x97\xa8\x50\x3e\x1b\x65\x36\x74\x4b\xf4\x96\x28\xd4\x44\xb1\x3f\xea\x62\x1d\x15\xbe\xcb\x62\x40\xa5\x66\x0e\x0b\xe8\x29\xf8\xac\xd9\x4c\x81\xdd\x0c\xe8\xf6\xa0\x84\x6e\x9a\x39\x28\x14\x84\xb9\x44\xe1\xd7\x2c\x22\x33\xeb\xe3\xc2\xb2\xef\x5a\x82\x52\x89\x43\xb6\xa0\x9f\x99\x04\xca\x6c\x3e\x7a\x9c\x27\x6d\xf9\x4d\xf2\x64\x6c\xdf\x3d\x5a\x71\x0b\x7d\xfb\x25\x7b\x66\x4f\xe1\x61\x6c\xff\x7b\x34\x59\x58\xbb\x07\xa3\xcf\x85\x07\x77\xa3\xbb\xf7\x16\xbc\x39\x1a\x68\x98\x7e\xb2\xad\x7b\x78\xfb\xa5\x1b\xfd\x68\x32\xb7\x1e\xf7\x04\x9f\xab\xef\x10\xff\x2b\x73\x7b\x41\x3a\x61\x19\x77\x37\xe6\x22\xa3\x9a\xbb\x77\x10\xf8\xcc\x49\x10\xc6\x1d\xed\xbb\x1b\x5a\xfa\x4c\x89\x50\x3a\x98\xed\x05\x43\xd3\xc8\x88\x6d\x30\x18\x0e\x6b\x12\x7d\x77\x4d\x11\xe7\x49\x29\xc4\x64\x28\xc9\x84\x89\x42\x9a\x56\x1b\xd2\xf1\xdd\x04\x62\xf2\xf0\xe8\x14\xd2\x61\xe8\xd5\x49\x64\x4f\xe0\xdf\x4f\x23\x1d\x06\xeb\x44\x62\x5a\xd0\x41\x25\x85\x65\x27\x2d\xe8\x9c\x4e\x8a\x7e\xf6\x1f\xf7\xd2\x29\xaf\x6b\x8c\xec\xcd\x36\xed\xb4\xd1\x2c\xbc\xb3\xde\x32\x0a\x51\x73\xa7\x37\x8d\x93\x7f\xda\x3c\xa8\xb7\x04\xf9\x33\xfa\x22\x40\xd0\xb8\xad\x13\xfc\x36\x1a\xcd\x42\x5f\x9b\xde\x6e\x30\xfa\xa8\x6d\x7e\x17\x45\xc3\xf8\x5e\x31\x8f\x53\x1d\x4a\x6c\xfa\xac\xfb\xc7\xcf\x97\xbf\xfd\xbe\xa3\xee\xff\xfe\xaf\x89\xbc\x7f\xfb\xbd\x36\x26\xe2\x46\x90\xb8\x8b\xd4\x99\x3e\x57\xc6\x05\xc7\xd6\x5e\x50\x50\x56\xd7\x93\xa1\x63\x1b\x24\x4b\x11\x72\x57\x45\x49\xfc\x45\x52\xee\x61\xc6\x9c\xa5\x5d\xc6\xdc\x6c\x4f\xa5\x1e\xf4\xe5\x83\x64\x1f\x4d\xed\x49\xd7\xa4\x00\x89\xfc\xdd\x74\xb2\x78\xb0\xa3\x0c\x47\xdf\xf9\x19\x5c\x8e\x5b\xfd\x4c\xfd\x8b\x41\xaf\xe1\x64\x30\x1c\x4a\xf4\x1c\x9f\x2a\xd5\xd8\x04\x8e\x09\xc6\xd8\xea\xf6\x82\xd3\x41\x92\x5d\x80\x3a\xa2\x12\x3c\xe1\xcb\xee\x08\xc8\x9e\xcd\x1f\x47\x63\xbb\x05\x74\x23\x2f\xee\x99\xce\xa4\xc0\x46\xf7\xf7\x05\x8b\x7d\xfc\x84\x0f\x8f\xe3\x87\xd1\xe3\x17\xf8\x97\xf5\x05\x2e\x98\x7b\x58\x17\x3f\x2d\x62\x93\xd9\x56\xcc\xad\xbe\xf6\x42\xbd\xcc\xe7\x9d\x0c\xda\xd8\xbe\xb7\x3e\x1f\xd6\xdf\xe2\xa5\x05\x95\x30\xb5\x9b\xbb\xdd\x62\x36\xb6\xff\x09\x4b\x2d\x11\xe1\x22\x15\xbe\xaa\x75\x12\x93\xc3\x51\x63\x3c\xa6\xb7\x71\xa3\xed\xe5\x6a\xb5\x3d\x9b\x3c\x4c\x1a\xf2\x31\x7d\x4c\x34\xf6\xf3\xb2\x32\x0e\x5c\xd5\x1b\xbf\x71\x03\x10\x24\xcb\x97\x44\xe6\x08\xde\x2f\xec\xf1\xc7\x45\x06\xa2\xa2\xbe\x08\x25\x3b\x30\x2c\xa1\x68\xfa\xf4\xbf\xca\x0e\xfe\xda\x00\xec\x98\xf8\xc8\xae\x33\xb7\xb7\xd3\xbb\x6f\x88\xab\xc6\x33\x8c\x1e\x40\x44\x40\x82\x53\x61\x49\x75\x17\xe1\x18\x1a\xe8\x41\xe8\x9a\x41\xe5\xa7\x91\xcb\x97\x53\xe0\x2a\xab\x2f\x42\xcb\x4e\x5b\x4b\x58\xcc\x5e\x16\x37\xf9\xa9\x5c\xad\xd9\xe8\xb7\xb3\x0d\x4e\x33\xee\xe2\x96\x54\xef\x0e\x88\xe0\x24\xbd\x1e\x38\x36\x82\x4e\x83\x45\x38\xf9\x5d\x46\x99\xf5\x13\xc1\x3d\xf1\x1c\x3f\x19\x6d\xb6\xba\x51\xf4\x4a\x48\xca\x14\x91\xce\x68\x02\x3f\x5a\x5b\x68\xb5\xd2\x49\x55\x91\x50\x0f\xe7\xd3\xcd\x13\xa9\xcd\x0f\xf0\x4f\x84\xa0\xc9\x54\xe7\x3e\xce\x25\xf7\xc3\x72\xea\x42\x2a\x99\x3a\x94\x8c\xcc\x2a\x2b\x77\x15\xa7\x4f\x48\xed\x76\xa4\x13\x52\x65\xc1\x7e\x00\x0b\xf7\x56\xaf\x96\xa7\xe2\x5d\x59\x17\xba\x82\xec\x7e\xc0\x9a\x6e\xe6\x5e\x0d\x61\xe3\xb5\x60\x17\xd4\xa6\x45\xfb\x61\xce\x06\xd1\x57\xc3\x99\x1f\x45\x75\x61\x6b\xfd\xd2\x28\xab\xdf\x1d\xfd\xbf\x06\x7d\x54\xad\x35\x4e\x6a\x87\x90\x48\x59\x71\xf9\x54\xfc\x44\x2c\xd2\x66\xb2\x0f\xae\xf2\x8a\xfd\x31\x9e\xae\xe5\xd6\x0d\xf5\xc2\x63\x6a\xbc\xf1\x68\xae\xb7\xa7\x1b\xfb\x53\xdd\x86\x59\xf3\xc0\xc1\xbf\x29\x3d\x2d\xc9\x29\x0e\xb7\xaf\xb1\x93\xea\xf6\xbe\x6b\xd4\xd6\x92\xba\x98\xcf\x5a\xd9\xc7\x2c\x59\x0a\xf1\x74\xb4\x22\x6b\xb1\xd1\x39\xd5\x5d\x5c\x64\xd7\x81\xd7\xbf\xfe\x0a\x03\x25\x7c\x97\x50\xa5\x50\xc7\xe5\x39\x18\x0e\x35\x6e\xf5\xe5\xe5\x15\x98\x05\x1d\xe1\xf6\x13\x64\x4a\x85\x28\xcd\xa2\x4b\x11\x7a\x6b\xdd\xcb\x7c\x49\xb4\xdd\x81\x92\x68\xc5\x85\x4b\xf8\xf4\xde\x7a\xb4\x92\x3d\x06\xb7\xf0\xd3\x4f\x95\x24\x9a\x7e\x49\x09\x8e\xd8\x04\x3e\x6a\xcc\x12\x52\xfc\x25\xe6\xbd\xf8\xc6\xcf\xcf\x5c\x29\x02\x88\x7f\x3b\xd6\x5c\x3d\x0e\x55\x0e\x75\xf1\xa6\x4b\xb2\xbc\xcd\x5a\x57\x15\x18\xa4\x9f\xdc\x1e\xba\xb3\x7e\xd8\x2a\x94\x95\x58\xab\x50\xfe\x65\xb4\x93\xfa\x7f\x00\x00\x00\xff\xff\x39\x8e\x26\xde\xc8\x2a\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10952, mode: os.FileMode(438), modTime: time.Unix(1499953054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xc1\x0a\x82\x40\x10\x86\xef\x0b\xfb\x0e\x73\x2c\xc2\x27\xf0\x14\x29\xe1\x45\xc3\x12\xba\x2d\xa3\x2e\x39\x87\x76\x96\x71\x20\x7c\xfb\x08\x0f\x69\x5e\xba\xce\xfc\x7c\xff\xff\x25\x09\x1c\x9e\xf4\x10\x54\x0f\x4d\xb4\xc6\x9a\x53\x9d\x1f\x6f\x39\x14\x65\x96\xdf\x61\xe0\xe8\xda\xc9\x0d\x4c\x3d\x54\x25\x0c\x34\x2a\xcb\xe4\x38\x7a\x41\x25\x0e\x2e\xa2\x28\x75\x14\x31\xe8\x08\xcd\xb5\x28\xcf\xd0\xaa\x78\x0f\xbb\x6d\x96\xfa\x7d\xfa\xcb\xd7\x99\xaf\x6b\xbe\x0a\x86\x11\xbb\x3f\x1b\x96\xe9\xb9\xc3\x9a\xa5\x57\xc6\xaf\xf0\xb9\x65\x75\x75\xd9\x7a\xa5\xeb\xc7\x77\x50\x6a\xcd\x3b\x00\x00\xff\xff\x25\x89\xaf\xf2\x1e\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 286, mode: os.FileMode(438), modTime: time.Unix(1499953054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_use_sequence_in_history_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xcd\x4a\xc3\x40\x14\x46\xf7\x03\xf3\x0e\xdf\xae\x0d\xda\x45\xb7\xcd\x6a\x3a\xb9\xa5\x81\xc9\x44\x27\x37\xda\xae\x42\x48\x42\x0d\xd4\x44\x33\xf1\xef\xed\x45\x6b\xb1\x50\x54\x70\x39\x87\x03\xdf\x61\xee\x6c\x86\x8b\xfb\x76\x37\x94\x63\x83\xfc\x41\x0a\xed\x48\x31\x21\xa3\xeb\x9c\xac\x26\xdc\xb5\x7e\xec\x87\xb7\xa2\xac\xaa\xfe\xa9\x1b\x7d\xd1\xd6\x85\x6f\x1e\xa5\x00\x80\x8c\x95\x63\xdc\xc6\xbc\xc6\xfc\x40\x62\xab\x1d\x25\x64\x19\xcb\xed\x91\xd9\x14\x49\x6c\x6f\x94\xc9\xe9\x1b\xa8\xcd\x09\xd0\x4a\xaf\x09\xf3\x50\x8a\x8c\x0c\x69\x86\x6f\xc6\xe7\x72\x3f\x9d\xfc\xb0\x3e\xb9\xc4\xf4\xcb\x4c\xd4\x66\xda\xd6\x01\x56\x2e\x4d\xce\x62\x83\x20\x94\x42\x19\x26\x07\x56\x4b\x43\x48\xad\xd9\x9e\x59\x38\x18\x3a\x35\x79\x62\xd1\xd6\xc8\x88\x11\xd1\x4a\xe5\x86\xd1\x35\xaf\xbf\xa7\x2c\x16\x43\xb3\xab\xf6\xa5\xf7\x1f\x63\x52\x9c\x7e\x68\xd4\xbf\x74\xff\x09\x88\x5c\x7a\x75\x2c\x08\xa5\xf8\x7c\xfe\x75\x91\x50\x8a\xf7\x00\x00\x00\xff\xff\xa6\xd1\x84\x5d\xcc\x01\x00\x00")

func migrations3_use_sequence_in_history_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_use_sequence_in_history_accountsSql,
		"migrations/3_use_sequence_in_history_accounts.sql",
	)
}

func migrations3_use_sequence_in_history_accountsSql() (*asset, error) {
	bytes, err := migrations3_use_sequence_in_history_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_use_sequence_in_history_accounts.sql", size: 460, mode: os.FileMode(438), modTime: time.Unix(1499953054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations4_add_protocol_versionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x90\x77\xf8\x77\x29\xb8\x77\x8a\xa6\x4e\x67\x22\x25\x19\x9c\x8a\xe8\x51\x03\xb5\x57\xae\x41\xf1\xed\x5d\x5d\x04\x9f\xe0\x6b\x1a\x6c\x1e\x65\xd4\x4b\x65\xe4\xc5\x1a\x47\xa9\xeb\x91\xdc\x8e\x3a\xc4\x40\x67\xdc\xcb\x5a\x45\xdf\xc3\xc4\xb7\x91\x75\x85\x35\x80\xf3\x1e\xfb\x48\xf9\x18\xb0\xa8\x54\xb9\xca\x34\x3c\x59\xd7\x22\x33\xca\x5c\x79\x64\x85\xef\x0e\x2e\x53\xc2\x16\x21\x26\x84\x4c\xd4\x5a\x63\xcd\xb7\xe7\xe5\x35\xff\x21\xfa\x3e\x9e\x7e\x71\xad\x35\x9f\x00\x00\x00\xff\xff\x8b\xa0\x0c\x65\xc2\x00\x00\x00")

func migrations4_add_protocol_versionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_add_protocol_versionSql,
		"migrations/4_add_protocol_version.sql",
	)
}

func migrations4_add_protocol_versionSql() (*asset, error) {
	bytes, err := migrations4_add_protocol_versionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_add_protocol_version.sql", size: 194, mode: os.FileMode(438), modTime: time.Unix(1499953054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_use_sequence_in_history_accounts.sql": migrations3_use_sequence_in_history_accountsSql,
	"migrations/4_add_protocol_version.sql": migrations4_add_protocol_versionSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_use_sequence_in_history_accounts.sql": &bintree{migrations3_use_sequence_in_history_accountsSql, map[string]*bintree{}},
		"4_add_protocol_version.sql": &bintree{migrations4_add_protocol_versionSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

